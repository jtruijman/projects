import math
import re

def prepare(text):
    """
    This function takes a string and repaces the characters !?",.()<> with spaces,
    and then splits the new string on whitespace and returns the resulting list
    of words.
    
    Args:
        text -> str: Input text from which we want to remove punctuation.

    Returns:
        list: A list of words without punctuation.
    """
    remove = ("!", "?", "<", ">", ".", ",","(",")",'"')
    
    for i in remove:       
        if i in text:
            text = text.replace( i, " ")
    woorden = text.split()
    
    return woorden
  
    
def ngrams(seq, n=3):
    """
    This function takes any sequence and an optional integer argument n and returns
    a list of it's ngrams.
    
    Args:
        seq (list): A list of words.
        n (int): The number of words in each n-gram. The default is 3.
    
    Returns:
        list: A list of n-grams.
    """    
    grams = []
    s = 0
    
    while s+n <= len(seq):
        grams.append(seq[s:s+n])
        s += 1
        
    return grams


def ngram_table(text, n=3, limit=0):
    """
    Generates a frequency table of n-grams from the input text.
    
    Args:
        text (str): The input text to be converted into n-grams.
        n (int): The number of words in each n-gram. The default is 3.
        limit (int): The maximum number of n-grams to return. The default is 0.

    Returns:
        dict: A dictionary where keys are n-grams and values are their frequencies.
    """    
    
    teller = dict()
    aready = prepare(text)
    cready = []
    
    for word in aready:
        if re.search(r"\w", word):
            cready += ngrams("<"+word+">", n)  
        
    for word in cready:
        if word in teller:
            teller[word] += 1
        else:
            teller[word] = 1
    
    sorted_tell = sorted(teller.items(), key=lambda x:x[1], reverse=True)
    
    if limit == 0:
        return dict(sorted_tell)
    else:    
        return dict(sorted_tell[0: limit])
    

def  write_ngrams(table, filename):
    """
    Writes the n-gram table, as generated by ngram_table, to a file.

    Args:
        table (dict): A dictionary where keys are n-grams and values are their frequency.
        filename (str): The name of the file where the n-gram is written.

    Returns:
        None, but a file was written.
    """    
    with open(filename, "w", encoding="utf-8") as file:
        for k, v in table.items():
            save = str(v)+" "+k+"\n"
            file.writelines(save)
            
            
def read_ngrams(filename):
    """
    Reads an n-gram frequency table from a file.
    
    Args:
        filename (str): The name of the file to read the table from.

    Returns:
        dict: A dictionary where keys are n-grams and values are their frequencies.
    """    
    dictionary = dict()
    with open(filename, encoding="utf-8") as file:
        fulllist = file.read()
        space = fulllist.replace("\n", " ")        
        split_1 = [d for d in space.split()]        
        
        for n in range(0,(len(split_1)),2):
            dictionary[split_1[n+1]] = int(split_1[n])
           
        return dictionary
          

def cosine_similarity(known, unknown):
    """
    This function computes the cosine similarity between two n-gram fequency tables.

    Args:
        known (dict): The first n-gram frequency table.
        unknown (dict): The second n-gram frequency table.

    Returns:
        float: The cosine similarity between the two tables.
    """    
    n = 0
    m = 0
    p = 0
    for tab in known:
        if tab in unknown:
            p += known[tab]*unknown[tab]

    for d in known.values():
        n += d*d
    for d in unknown.values():
        m += d*d
    
    return (p/(math.sqrt(n)*math.sqrt(m)))
